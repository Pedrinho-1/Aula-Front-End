#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define TAM_NOME 50
#define TAM_CPF 15
#define TAM_CONTATO 20
#define TAMANHO_INICIAL_ARRAY 5
#define FATOR_CRESCIMENTO_ARRAY 2
#define NOME_ARQUIVO "trabalhadores.dat"

#define TAM_USUARIO 30
#define TAM_SENHA 20
#define MAX_USUARIOS 10 

typedef struct {
    char telefone[TAM_CONTATO];
    char email[TAM_NOME];
} Contato;

typedef struct {
    int id;
    char nome[TAM_NOME];
    char cpf[TAM_CPF];
    char cargo[TAM_NOME];
    float salario;
    int horasTrabalhadasMes;
    int ativo;
    Contato contato;
} Trabalhador;

typedef struct {
    char username[TAM_USUARIO];
    char senha[TAM_SENHA];
    int tipo; // 1 = Admin, 2 = Usuario comum
} Usuario;

Usuario usuarios[MAX_USUARIOS] = {
    {"admin", "admin123", 1},
    {"usuario", "1234", 2},
    {"Pedro Augusto", "1603", 1}, 
    {"Aluno Unijorge", "UJ@", 2}  
};
int totalUsuarios = 4; 

Trabalhador* trabalhadores = NULL;
int totalTrabalhadores = 0;
int capacidadeTrabalhadores = 0;
int proximoId = 1;

void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

int expandirArrayTrabalhadores() {
    int novaCapacidade = capacidadeTrabalhadores == 0 ? TAMANHO_INICIAL_ARRAY : capacidadeTrabalhadores * FATOR_CRESCIMENTO_ARRAY;
    Trabalhador* novoArray = realloc(trabalhadores, novaCapacidade * sizeof(Trabalhador));
    if (novoArray == NULL) {
        printf("\nErro: Falha ao expandir a memória para trabalhadores!\n");
        return 0;
    }
    trabalhadores = novoArray;
    capacidadeTrabalhadores = novaCapacidade;
    printf("\nMemória para trabalhadores expandida para %d vagas.\n", capacidadeTrabalhadores);
    return 1;
}

void salvarDadosNoArquivo() {
    FILE* arq = fopen(NOME_ARQUIVO, "wb");
    if (arq == NULL) {
        printf("\nErro: Não foi possível abrir o arquivo '%s' para escrita. Dados NÃO SALVOS.\n", NOME_ARQUIVO);
        return;
    }
    fwrite(&totalTrabalhadores, sizeof(int), 1, arq);
    fwrite(&proximoId, sizeof(int), 1, arq);
    fwrite(trabalhadores, sizeof(Trabalhador), totalTrabalhadores, arq);
    fclose(arq);
    printf("\nDados de trabalhadores salvos em '%s' com sucesso.\n", NOME_ARQUIVO);
}

void carregarDadosDoArquivo() {
    FILE* arq = fopen(NOME_ARQUIVO, "rb");
    if (arq == NULL) {
        printf("Arquivo '%s' não encontrado ou não foi possível abrir para leitura. Começando com dados vazios.\n", NOME_ARQUIVO);
        if (trabalhadores == NULL) { 
            expandirArrayTrabalhadores();
        }
        return;
    }
    fread(&totalTrabalhadores, sizeof(int), 1, arq);
    fread(&proximoId, sizeof(int), 1, arq);
    while (totalTrabalhadores > capacidadeTrabalhadores) {
        expandirArrayTrabalhadores();
    }
    fread(trabalhadores, sizeof(Trabalhador), totalTrabalhadores, arq);
    fclose(arq);
    printf("Dados de trabalhadores carregados de '%s' com sucesso. Total: %d trabalhadores.\n", NOME_ARQUIVO, totalTrabalhadores);
}

void exibirTrabalhador(Trabalhador t) {
    printf("\n--- Detalhes do Trabalhador (ID: %d) ---\n", t.id);
    printf("Nome: %s\n", t.nome);
    printf("CPF: %s\n", t.cpf);
    printf("Cargo: %s\n", t.cargo);
    printf("Salário: R$ %.2f\n", t.salario);
    printf("Horas Trabalhadas (Mês): %d\n", t.horasTrabalhadasMes);
    printf("Status: %s\n", t.ativo ? "Ativo" : "Inativo/Desligado");
    printf("Telefone: %s\n", t.contato.telefone);
    printf("Email: %s\n", t.contato.email);
    printf("---------------------------------------\n");
}

void cadastrarTrabalhador() {
    if (totalTrabalhadores >= capacidadeTrabalhadores) {
        if (!expandirArrayTrabalhadores()) {
            printf("\nNão foi possível cadastrar novo trabalhador devido à falta de memória.\n");
            return;
        }
    }

    printf("\n Cadastrar Novo Trabalhador \n");
    Trabalhador* t = &trabalhadores[totalTrabalhadores];
    t->id = proximoId++;
    printf("ID do Trabalhador: %d\n", t->id);

    printf("Nome completo: ");
    fgets(t->nome, TAM_NOME, stdin);
    t->nome[strcspn(t->nome, "\n")] = 0;

    printf("CPF (apenas números, ex: 12345678900): ");
    fgets(t->cpf, TAM_CPF, stdin);
    t->cpf[strcspn(t->cpf, "\n")] = 0;

    printf("Cargo: ");
    fgets(t->cargo, TAM_NOME, stdin);
    t->cargo[strcspn(t->cargo, "\n")] = 0;

    printf("Salário Mensal (R$): ");
    scanf("%f", &t->salario);
    limparBuffer();

    printf("Horas Trabalhadas no Mês: ");
    scanf("%d", &t->horasTrabalhadasMes);
    limparBuffer();

    printf("Telefone de Contato: ");
    fgets(t->contato.telefone, TAM_CONTATO, stdin);
    t->contato.telefone[strcspn(t->contato.telefone, "\n")] = 0;

    printf("Email de Contato: ");
    fgets(t->contato.email, TAM_NOME, stdin);
    t->contato.email[strcspn(t->contato.email, "\n")] = 0;

    t->ativo = 1;
    totalTrabalhadores++;
    salvarDadosNoArquivo();
    printf("\nTrabalhador '%s' cadastrado com sucesso! ID: %d\n", t->nome, t->id);
}

void consultarTrabalhadorPorId() {
    int idBusca;
    printf("\n--- Consultar Trabalhador por ID ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado.\n");
        return;
    }
    printf("Digite o ID do trabalhador: ");
    scanf("%d", &idBusca);
    limparBuffer();

    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].id == idBusca) {
            exibirTrabalhador(trabalhadores[i]);
            return;
        }
    }
    printf("Trabalhador com ID %d não encontrado.\n", idBusca);
}

void consultarTrabalhadorPorNome() {
    char nomeBusca[TAM_NOME];
    int encontrados = 0;
    printf("\n--- Consultar Trabalhador por Nome ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado.\n");
        return;
    }
    printf("Digite parte ou o nome completo do trabalhador: ");
    fgets(nomeBusca, TAM_NOME, stdin);
    nomeBusca[strcspn(nomeBusca, "\n")] = 0;

    printf("\nResultados da Busca por '%s':\n", nomeBusca);
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (strstr(trabalhadores[i].nome, nomeBusca) != NULL) {
            exibirTrabalhador(trabalhadores[i]);
            encontrados++;
        }
    }
    if (encontrados == 0) {
        printf("Nenhum trabalhador encontrado com o nome '%s'.\n", nomeBusca);
    }
}

void atualizarDadosTrabalhador() {
    int idAtualizar;
    printf("\n--- Atualizar Dados do Trabalhador ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado para atualizar.\n");
        return;
    }
    printf("Digite o ID do trabalhador para atualizar: ");
    scanf("%d", &idAtualizar);
    limparBuffer();

    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].id == idAtualizar) {
            printf("\nTrabalhador encontrado: %s\n", trabalhadores[i].nome);
            printf("Quais dados deseja atualizar?\n");
            printf("1 - Salário\n");
            printf("2 - Horas Trabalhadas\n");
            printf("3 - Status (Ativo/Inativo)\n");
            printf("4 - Contato (Telefone/Email)\n");
            printf("0 - Cancelar\n");
            printf("Escolha uma opção: ");
            int opcaoAtualizacao;
            scanf("%d", &opcaoAtualizacao);
            limparBuffer();

            switch (opcaoAtualizacao) {
                case 1:
                    printf("Novo Salário (R$): ");
                    scanf("%f", &trabalhadores[i].salario);
                    limparBuffer();
                    printf("Salário atualizado com sucesso!\n");
                    break;
                case 2:
                    printf("Novas Horas Trabalhadas no Mês: ");
                    scanf("%d", &trabalhadores[i].horasTrabalhadasMes);
                    limparBuffer();
                    printf("Horas trabalhadas atualizadas com sucesso!\n");
                    break;
                case 3:
                    printf("Definir status (1 para Ativo, 0 para Inativo/Desligado): ");
                    scanf("%d", &trabalhadores[i].ativo);
                    limparBuffer();
                    printf("Status atualizado com sucesso!\n");
                    break;
                case 4:
                    printf("Novo Telefone de Contato: ");
                    fgets(trabalhadores[i].contato.telefone, TAM_CONTATO, stdin);
                    trabalhadores[i].contato.telefone[strcspn(trabalhadores[i].contato.telefone, "\n")] = 0;

                    printf("Novo Email de Contato: ");
                    fgets(trabalhadores[i].contato.email, TAM_NOME, stdin);
                    trabalhadores[i].contato.email[strcspn(trabalhadores[i].contato.email, "\n")] = 0;
                    
                    printf("Dados de contato atualizados com sucesso!\n");
                    break;
                case 0:
                    printf("Atualização cancelada.\n");
                    break;
                default:
                    printf("Opção de atualização inválida.\n");
            }
            salvarDadosNoArquivo();
            return;
        }
    }
    printf("Trabalhador com ID %d não encontrado para atualização.\n", idAtualizar);
}

void removerTrabalhador() {
    int idRemover;
    printf("\n--- Remover/Desligar Trabalhador ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado para remover.\n");
        return;
    }
    printf("Digite o ID do trabalhador para remover/desligar: ");
    scanf("%d", &idRemover);
    limparBuffer();

    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].id == idRemover) {
            printf("Trabalhador encontrado: %s (ID: %d, Status: %s)\n",
                   trabalhadores[i].nome, trabalhadores[i].id, trabalhadores[i].ativo ? "Ativo" : "Inativo");
            printf("Confirmar desligamento/remoção de '%s'? (1 - Sim, 0 - Não): ", trabalhadores[i].nome);
            int confirmacao;
            scanf("%d", &confirmacao);
            limparBuffer();

            if (confirmacao == 1) {
                trabalhadores[i].ativo = 0;
                printf("Trabalhador '%s' (ID: %d) marcado como INATIVO/DESLIGADO com sucesso.\n",
                       trabalhadores[i].nome, trabalhadores[i].id);
                salvarDadosNoArquivo();
            } else {
                printf("Remoção/desligamento cancelado.\n");
            }
            return;
        }
    }
    printf("Trabalhador com ID %d não encontrado para remoção/desligamento.\n", idRemover);
}

void listarTrabalhadores() {
    printf("\n Lista de Todos os Trabalhadores \n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado ainda.\n");
        return;
    }
    printf("%-5s %-30s %-15s %-20s %-10s %-10s %-15s %s\n",
           "ID", "Nome", "CPF", "Cargo", "Salário", "Horas", "Telefone", "Status");
    printf("--------------------------------------------------------------------------------------------------------------------\n");
    for (int i = 0; i < totalTrabalhadores; i++) {
        printf("%-5d %-30s %-15s %-20s %-10.2f %-10d %-15s %s\n",
               trabalhadores[i].id,
               trabalhadores[i].nome,
               trabalhadores[i].cpf,
               trabalhadores[i].cargo,
               trabalhadores[i].salario,
               trabalhadores[i].horasTrabalhadasMes,
               trabalhadores[i].contato.telefone,
               trabalhadores[i].ativo ? "Ativo" : "Inativo");
    }
    printf("--------------------------------------------------------------------------------------------------------------------\n");
}

int fazerLogin() {
    char usuarioInput[TAM_USUARIO], senhaInput[TAM_SENHA];
    printf("\n--- Login ---\n");
    printf("Usuário: ");
    fgets(usuarioInput, TAM_USUARIO, stdin);
    usuarioInput[strcspn(usuarioInput, "\n")] = 0;
    printf("Senha: ");
    fgets(senhaInput, TAM_SENHA, stdin);
    senhaInput[strcspn(senhaInput, "\n")] = 0;

    for (int i = 0; i < totalUsuarios; i++) {
        if (strcmp(usuarioInput, usuarios[i].username) == 0 &&
            strcmp(senhaInput, usuarios[i].senha) == 0) {
            printf("Login bem-sucedido! Bem-vindo(a), %s.\n", usuarios[i].username);
            return usuarios[i].tipo;
        }
    }
    printf("Usuário ou senha inválidos.\n");
    return 0; 
}

void menuODS8(int tipoUsuario) {
    int opcao;
    do {
        printf("\n--- Menu ODS 8 (%s) ---\n", tipoUsuario == 1 ? "Admin" : "Usuário Comum");
        printf("1 - Cadastrar Trabalhador\n");
        printf("2 - Consultar por ID\n");
        printf("3 - Consultar por Nome\n");
        if (tipoUsuario == 1) { 
            printf("4 - Atualizar Trabalhador\n");
            printf("5 - Remover Trabalhador\n");
        }
        printf("6 - Listar Todos\n");
        printf("0 - Sair do ODS 8\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch(opcao) {
            case 1:
                if (tipoUsuario == 1) {
                    cadastrarTrabalhador();
                } else {
                    printf("Acesso negado. Apenas administradores podem cadastrar trabalhadores.\n");
                }
                break;
            case 2:
                consultarTrabalhadorPorId();
                break;
            case 3:
                consultarTrabalhadorPorNome();
                break;
            case 4:
                if (tipoUsuario == 1) {
                    atualizarDadosTrabalhador();
                } else {
                    printf("Acesso negado. Apenas administradores podem atualizar dados de trabalhadores.\n");
                }
                break;
            case 5:
                if (tipoUsuario == 1) {
                    removerTrabalhador();
                } else {
                    printf("Acesso negado. Apenas administradores podem remover trabalhadores.\n");
                }
                break;
            case 6:
                listarTrabalhadores();
                break;
            case 0:
                printf("Saindo do menu ODS 8...\n");
                break;
            default:
                printf("Opção inválida! Por favor, escolha novamente.\n");
        }

    } while(opcao != 0);
}

int main() {
    if (!expandirArrayTrabalhadores()) {
        printf("Erro fatal: Não foi possível alocar memória inicial. Encerrando.\n");
        return 1;
    }
    carregarDadosDoArquivo();

    int tipoUsuario = fazerLogin();
    if (tipoUsuario == 0) {
        printf("Login inválido. Encerrando o sistema.\n");
        return 1;
    }

    int opcao;
    do {
        printf("\n Sistema de Gestão de Desenvolvimento Sustentável \n");
        printf("1 - Gerenciar Trabalho Decente e Crescimento Econômico\n");
        printf("0 - Sair do Sistema\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch (opcao) {
            case 1:
                menuODS8(tipoUsuario);
                break;
            case 0:
                printf("Encerrando o Sistema. Até logo!\n");
                break;
            default:
                printf("Opção inválida! Por favor, insira um número válido.\n");
        }

    } while(opcao != 0);

    salvarDadosNoArquivo();
    if (trabalhadores != NULL) {
        free(trabalhadores);
        trabalhadores = NULL;
        printf("\nMemória de trabalhadores liberada.\n");
    }
    return 0;
}
