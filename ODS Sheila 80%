#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define TAM_NOME 50
#define TAM_CPF 15
#define TAM_CONTATO 20
#define TAMANHO_INICIAL_ARRAY 5
#define FATOR_CRESCIMENTO_ARRAY 2
#define FATOR_ENCOLHIMENTO_ARRAY 4

typedef struct {
    char telefone[TAM_CONTATO];
    char email[TAM_NOME];
} Contato;

typedef struct {
    int id;
    char nome[TAM_NOME];
    char cpf[TAM_CPF];
    char cargo[TAM_NOME];
    float salario;
    int horasTrabalhadasMes;
    int ativo;
    Contato contato;
} Trabalhador;

Trabalhador* trabalhadores = NULL;
int totalTrabalhadores = 0;
int capacidadeTrabalhadores = 0;
int proximoId = 1;


void limparBuffer();
int expandirArrayTrabalhadores();
void encolherArrayTrabalhadores();
int cpfValido(const char* cpf);
int string_compare_case_insensitive(const char *s1, const char *s2);
char* strcasestr_custom(const char* haystack, const char* needle); 

void cadastrarTrabalhador();
void consultarTrabalhadorPorId();
void consultarTrabalhadorPorNome();
void atualizarDadosTrabalhador();
void removerTrabalhador();
void listarTrabalhadores();
void emitirAlertasCriticos();
void exibirTrabalhador(Trabalhador t);

void ordenarTrabalhadoresPorID();
void ordenarTrabalhadoresPorNome();
int compararPorID(const void* a, const void* b);
int compararPorNome(const void* a, const void* b); 

void relatoriosFiltrados();
void relatorioPorStatus(int status);
void relatorioPorFaixaSalarial();
void relatorioPorCargo();

void menuODS8();

void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

int expandirArrayTrabalhadores() {
    int novaCapacidade = (capacidadeTrabalhadores == 0) ? TAMANHO_INICIAL_ARRAY : capacidadeTrabalhadores * FATOR_CRESCIMENTO_ARRAY;
    Trabalhador* novoArray = (Trabalhador*)realloc(trabalhadores, novaCapacidade * sizeof(Trabalhador));
    if (novoArray == NULL) {
        printf("Erro ao expandir o array de trabalhadores: Falta de memória.\n");
        return 0;
    }
    trabalhadores = novoArray;
    capacidadeTrabalhadores = novaCapacidade;
    printf("Array de trabalhadores expandido para %d posições.\n", capacidadeTrabalhadores);
    return 1; 
}

void encolherArrayTrabalhadores() {
    if (capacidadeTrabalhadores > TAMANHO_INICIAL_ARRAY && totalTrabalhadores * FATOR_ENCOLHIMENTO_ARRAY < capacidadeTrabalhadores) {
        int novaCapacidade = capacidadeTrabalhadores / FATOR_CRESCIMENTO_ARRAY; 
        if (novaCapacidade < TAMANHO_INICIAL_ARRAY) {
            novaCapacidade = TAMANHO_INICIAL_ARRAY; 
        }
        Trabalhador* novoArray = (Trabalhador*)realloc(trabalhadores, novaCapacidade * sizeof(Trabalhador));
        if (novoArray == NULL) {
            printf("Aviso: Falha ao encolher o array de trabalhadores, mantendo o tamanho atual.\n");
            return;
        }
        trabalhadores = novoArray;
        capacidadeTrabalhadores = novaCapacidade;
        printf("Array de trabalhadores encolhido para %d posições.\n", capacidadeTrabalhadores);
    }
}
int cpfValido(const char* cpf) {
    
    if (strlen(cpf) != 11) return 0;
    
    for (int i = 0; i < 11; i++) {
        if (!isdigit(cpf[i])) return 0;
    }
    
    return 1;
}


char* strcasestr_custom(const char* haystack, const char* needle) {
    size_t len_needle = strlen(needle);
    if (!len_needle) return (char*)haystack; 
    for (; *haystack; haystack++) {
        if (string_compare_case_insensitive(haystack, needle) == 0 && strlen(haystack) >= len_needle) {
           
            int match = 1;
            for (size_t i = 0; i < len_needle; i++) {
                if (tolower((unsigned char)haystack[i]) != tolower((unsigned char)needle[i])) {
                    match = 0;
                    break;
                }
            }
            if (match) {
                return (char*)haystack;
            }
        }
    }
    return NULL;
}

int string_compare_case_insensitive(const char *s1, const char *s2) {
    while (*s1 && *s2) {
        if (tolower((unsigned char)*s1) != tolower((unsigned char)*s2)) {
            return (int)tolower((unsigned char)*s1) - (int)tolower((unsigned char)*s2);
        }
        s1++;
        s2++;
    }
    return (int)tolower((unsigned char)*s1) - (int)tolower((unsigned char)*s2);
}
int compararPorNome(const void* a, const void* b) {
    Trabalhador* trabA = (Trabalhador*)a;
    Trabalhador* trabB = (Trabalhador*)b;
    return string_compare_case_insensitive(trabA->nome, trabB->nome);
}
void cadastrarTrabalhador() {
    if (totalTrabalhadores >= capacidadeTrabalhadores) {
        if (!expandirArrayTrabalhadores()) {
            printf("\nNão foi possível cadastrar novo trabalhador devido à falta de memória.\n");
            return;
        }
    }

    printf("\n--- Cadastrar Novo Trabalhador ---\n");

    trabalhadores[totalTrabalhadores].id = proximoId++;

    printf("ID do Trabalhador: %d\n", trabalhadores[totalTrabalhadores].id);

    printf("Nome completo: ");
    fgets(trabalhadores[totalTrabalhadores].nome, TAM_NOME, stdin);
    strtok(trabalhadores[totalTrabalhadores].nome, "\n");

    char temp_cpf[TAM_CPF];
    do {
        printf("CPF (11 dígitos, apenas números): ");
        fgets(temp_cpf, TAM_CPF, stdin);
        strtok(temp_cpf, "\n");

        if (!cpfValido(temp_cpf)) {
            printf("CPF inválido! Certifique-se de inserir 11 dígitos numéricos.\n");
        }
    } while (!cpfValido(temp_cpf));
    strcpy(trabalhadores[totalTrabalhadores].cpf, temp_cpf);

 printf("Cargo: ");
    fgets(trabalhadores[totalTrabalhadores].cargo, TAM_NOME, stdin);
    strtok(trabalhadores[totalTrabalhadores].cargo, "\n");

    printf("Salário Mensal (R$): ");
    scanf("%f", &trabalhadores[totalTrabalhadores].salario);
    limparBuffer();

    printf("Horas Trabalhadas no Mês: ");
    scanf("%d", &trabalhadores[totalTrabalhadores].horasTrabalhadasMes);
    limparBuffer();

    printf("Telefone de Contato: ");
    fgets(trabalhadores[totalTrabalhadores].contato.telefone, TAM_CONTATO, stdin);
    strtok(trabalhadores[totalTrabalhadores].contato.telefone, "\n");

    printf("Email de Contato: ");
    fgets(trabalhadores[totalTrabalhadores].contato.email, TAM_NOME, stdin);
    strtok(trabalhadores[totalTrabalhadores].contato.email, "\n");

    trabalhadores[totalTrabalhadores].ativo = 1;

    printf("\nTrabalhador '%s' cadastrado com sucesso! ID: %d\n",
           trabalhadores[totalTrabalhadores].nome, trabalhadores[totalTrabalhadores].id);

    totalTrabalhadores++;
}

void exibirTrabalhador(Trabalhador t) {
    printf("\n--- Detalhes do Trabalhador (ID: %d) ---\n", t.id);
    printf("Nome: %s\n", t.nome);
    printf("CPF: %s\n", t.cpf);
    printf("Cargo: %s\n", t.cargo);
    printf("Salário: R$ %.2f\n", t.salario);
    printf("Horas Trabalhadas (Mês): %d\n", t.horasTrabalhadasMes);
    printf("Status: %s\n", t.ativo ? "Ativo" : "Inativo/Desligado");
    printf("Telefone: %s\n", t.contato.telefone);
    printf("Email: %s\n", t.contato.email);
    printf("---------------------------------------\n");
}
void consultarTrabalhadorPorId() {
    int idBusca;
    printf("\n--- Consultar Trabalhador por ID ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado.\n");
        return;
    }
    printf("Digite o ID do trabalhador: ");
    scanf("%d", &idBusca);
    limparBuffer();

    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].id == idBusca) {
            exibirTrabalhador(trabalhadores[i]);
            return;
        }
    }
    printf("Trabalhador com ID %d não encontrado.\n", idBusca);
}

void consultarTrabalhadorPorNome() {
    char nomeBusca[TAM_NOME];
    int encontrados = 0;
    printf("\n--- Consultar Trabalhador por Nome ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado.\n");
        return;
    }
    printf("Digite parte ou o nome completo do trabalhador: ");
    fgets(nomeBusca, TAM_NOME, stdin);
    strtok(nomeBusca, "\n");

    printf("\nResultados da Busca por '%s':\n", nomeBusca);
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (strcasestr_custom(trabalhadores[i].nome, nomeBusca) != NULL) {
            exibirTrabalhador(trabalhadores[i]);
            encontrados++;
        }
    }

if (encontrados == 0) {
        printf("Nenhum trabalhador encontrado com o nome '%s'.\n", nomeBusca);
    }
}
void atualizarDadosTrabalhador() {
    int idAtualizar;
    printf("\n--- Atualizar Dados do Trabalhador ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado para atualizar.\n");
        return;
    }
    printf("Digite o ID do trabalhador para atualizar: ");
    scanf("%d", &idAtualizar);
    limparBuffer();

    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].id == idAtualizar) {
            printf("\nTrabalhador encontrado: %s\n", trabalhadores[i].nome);
            printf("Quais dados deseja atualizar?\n");
            printf("1 - Salário\n");
            printf("2 - Horas Trabalhadas\n");
            printf("3 - Status (Ativo/Inativo)\n");
            printf("4 - Contato (Telefone/Email)\n");
            printf("0 - Cancelar\n");
            printf("Escolha uma opção: ");
            int opcaoAtualizacao;
            scanf("%d", &opcaoAtualizacao);
            limparBuffer();

            switch (opcaoAtualizacao) {
                case 1:
                    printf("Novo Salário (R$): ");
                    scanf("%f", &trabalhadores[i].salario);
                    limparBuffer();
                    printf("Salário atualizado com sucesso!\n");
                    break;
                case 2:
                    printf("Novas Horas Trabalhadas no Mês: ");
                    scanf("%d", &trabalhadores[i].horasTrabalhadasMes);
                    limparBuffer();
                    printf("Horas trabalhadas atualizadas com sucesso!\n");
                    break;
                case 3:
                    printf("Definir status (1 para Ativo, 0 para Inativo/Desligado): ");
                    scanf("%d", &trabalhadores[i].ativo);
                    limparBuffer();
                    printf("Status atualizado com sucesso!\n");
                    break;
                case 4:
                    printf("Novo Telefone de Contato: ");
                    fgets(trabalhadores[i].contato.telefone, TAM_CONTATO, stdin);
                    strtok(trabalhadores[i].contato.telefone, "\n");
                    printf("Novo Email de Contato: ");
                    fgets(trabalhadores[i].contato.email, TAM_NOME, stdin);
                    strtok(trabalhadores[i].contato.email, "\n");
                    printf("Dados de contato atualizados com sucesso!\n");
                    break;
                case 0:
                    printf("Atualização cancelada.\n");
                    break;
                default:
                    printf("Opção de atualização inválida.\n");
            }
            return;
        }
    }
    printf("Trabalhador com ID %d não encontrado para atualização.\n", idAtualizar);
}
void removerTrabalhador() {
    int idRemover;
    printf("\n--- Remover/Desligar Trabalhador ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado para remover.\n");
        return;
    }
    printf("Digite o ID do trabalhador para remover/desligar: ");
    scanf("%d", &idRemover);
    limparBuffer();

    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].id == idRemover) {
           
            char nomeRemovido[TAM_NOME];
            strcpy(nomeRemovido, trabalhadores[i].nome);

            printf("Trabalhador encontrado: %s (ID: %d, Status: %s)\n",
                   nomeRemovido, trabalhadores[i].id, trabalhadores[i].ativo ? "Ativo" : "Inativo");

            printf("Confirmar desligamento/remoção de '%s'? (1 - Sim, 0 - Não): ", nomeRemovido);
            int confirmacao;
            scanf("%d", &confirmacao);
            limparBuffer();

            if (confirmacao == 1) {
                for (int j = i; j < totalTrabalhadores - 1; j++) {
                    trabalhadores[j] = trabalhadores[j + 1];
                }
                totalTrabalhadores--;
                printf("Trabalhador '%s' (ID: %d) removido fisicamente do sistema.\n",
                       nomeRemovido, idRemover);

                encolherArrayTrabalhadores();
            } else {
                printf("Remoção/desligamento cancelado.\n");
            }
            return;
        }
    }
    printf("Trabalhador com ID %d não encontrado para remoção/desligamento.\n", idRemover);
}

void listarTrabalhadores() {
    printf("\n--- Lista de Todos os Trabalhadores ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado ainda.\n");
        return;
    }

    printf("%-5s %-30s %-15s %-20s %-10s %-10s %-10s %s\n",
           "ID", "Nome", "CPF", "Cargo", "Salário", "Horas", "Status", "Telefone");
    printf("---\n");

    for (int i = 0; i < totalTrabalhadores; i++) {
        printf("%-5d %-30s %-15s %-20s %-10.2f %-10d %-10s %s\n",
               trabalhadores[i].id,
               trabalhadores[i].nome,
               trabalhadores[i].cpf,
               trabalhadores[i].cargo,
               trabalhadores[i].salario,
               trabalhadores[i].horasTrabalhadasMes,
               trabalhadores[i].ativo ? "Ativo" : "Inativo",
               trabalhadores[i].contato.telefone);
    }
    printf("----\n");
}

void emitirAlertasCriticos() {
    printf("\n--- Alertas de Situação Crítica ---\n");
    int alertasEncontrados = 0;

    printf("\n--- Trabalhadores com Salário abaixo de R$ 1500.00 ---\n");
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].ativo && trabalhadores[i].salario < 1500.00) {
            printf("ALERTA: ID %d - %s (Cargo: %s) - Salário: R$ %.2f (Abaixo do mínimo recomendado).\n",
                   trabalhadores[i].id, trabalhadores[i].nome, trabalhadores[i].cargo, trabalhadores[i].salario);
            alertasEncontrados++;
        }
    }

    printf("\n--- Trabalhadores com menos de 80 horas trabalhadas no mês (Ativos) ---\n");
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].ativo && trabalhadores[i].horasTrabalhadasMes < 80) {
            printf("ALERTA: ID %d - %s (Cargo: %s) - Horas: %d (Potencial subutilização ou erro de registro).\n",
                   trabalhadores[i].id, trabalhadores[i].nome, trabalhadores[i].cargo, trabalhadores[i].horasTrabalhadasMes);
            alertasEncontrados++;
        }
    }

    printf("\n--- Trabalhadores Inativos/Desligados ---\n");
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (!trabalhadores[i].ativo) {
            printf("INATIVO: ID %d - %s (CPF: %s) - Cargo: %s.\n",
                   trabalhadores[i].id, trabalhadores[i].nome, trabalhadores[i].cpf, trabalhadores[i].cargo);
            alertasEncontrados++;
        }
    }

    if (alertasEncontrados == 0) {
        printf("\nNenhum alerta crítico encontrado no momento.\n");
    }
}

int compararPorID(const void* a, const void* b) {
    Trabalhador* trabA = (Trabalhador*)a;
    Trabalhador* trabB = (Trabalhador*)b;
    return trabA->id - trabB->id;
}

void ordenarTrabalhadoresPorID() {
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador para ordenar.\n");
        return;
    }
    qsort(trabalhadores, totalTrabalhadores, sizeof(Trabalhador), compararPorID);
    printf("\nTrabalhadores ordenados por ID.\n");
    listarTrabalhadores();
}

void ordenarTrabalhadoresPorNome() {
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador para ordenar.\n");
        return;
    }
    qsort(trabalhadores, totalTrabalhadores, sizeof(Trabalhador), compararPorNome);
    printf("\nTrabalhadores ordenados por Nome.\n");
    listarTrabalhadores();
}

void relatorioPorStatus(int status) {
    printf("\n--- Relatório de Trabalhadores %s ---\n", status ? "Ativos" : "Inativos/Desligados");
    int encontrados = 0;
    printf("%-5s %-30s %-20s %-10s %s\n", "ID", "Nome", "Cargo", "Salário", "Horas");
    printf("---------------------------------------------------------------------------\n");
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].ativo == status) {
            printf("%-5d %-30s %-20s %-10.2f %d\n",
                   trabalhadores[i].id, trabalhadores[i].nome, trabalhadores[i].cargo,
                   trabalhadores[i].salario, trabalhadores[i].horasTrabalhadasMes);
            encontrados++;
        }
    }
    if (encontrados == 0) {
        printf("Nenhum trabalhador %s encontrado.\n", status ? "ativo" : "inativo/desligado");
    }
    printf("---------------------------------------------------------------------------\n");
}

void relatorioPorFaixaSalarial() {
    float minSalario, maxSalario;
    printf("\n--- Relatório de Trabalhadores por Faixa Salarial ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado.\n");
        return;
    }
    printf("Digite o salário mínimo da faixa (R$): ");
    scanf("%f", &minSalario);
    limparBuffer();
    printf("Digite o salário máximo da faixa (R$): ");
    scanf("%f", &maxSalario);
    limparBuffer();

    int encontrados = 0;
    printf("\nTrabalhadores com salário entre R$ %.2f e R$ %.2f:\n", minSalario, maxSalario);
    printf("%-5s %-30s %-20s %-10s %s\n", "ID", "Nome", "Cargo", "Salário", "Status");
    printf("---------------------------------------------------------------------------\n");
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (trabalhadores[i].salario >= minSalario && trabalhadores[i].salario <= maxSalario) {
            printf("%-5d %-30s %-20s %-10.2f %s\n",
                   trabalhadores[i].id, trabalhadores[i].nome, trabalhadores[i].cargo,
                   trabalhadores[i].salario, trabalhadores[i].ativo ? "Ativo" : "Inativo");
            encontrados++;
        }
    }
    if (encontrados == 0) {
        printf("Nenhum trabalhador encontrado nesta faixa salarial.\n");
    }
    printf("---------------------------------------------------------------------------\n");
}

void relatorioPorCargo() {
    char cargoBusca[TAM_NOME];
    printf("\n--- Relatório de Trabalhadores por Cargo ---\n");
    if (totalTrabalhadores == 0) {
        printf("Nenhum trabalhador cadastrado.\n");
        return;
    }
    printf("Digite o cargo para filtrar: ");
    fgets(cargoBusca, TAM_NOME, stdin);
    strtok(cargoBusca, "\n");

    int encontrados = 0;
    printf("\nTrabalhadores no cargo '%s':\n", cargoBusca);
    printf("%-5s %-30s %-15s %-10s %s\n", "ID", "Nome", "CPF", "Salário", "Status");
    printf("---------------------------------------------------------------------------\n");
    for (int i = 0; i < totalTrabalhadores; i++) {
        if (string_compare_case_insensitive(trabalhadores[i].cargo, cargoBusca) == 0) {
            printf("%-5d %-30s %-15s %-10.2f %s\n",
                   trabalhadores[i].id, trabalhadores[i].nome, trabalhadores[i].cpf,
                   trabalhadores[i].salario, trabalhadores[i].ativo ? "Ativo" : "Inativo");
            encontrados++;
        }
    }
    if (encontrados == 0) {
        printf("Nenhum trabalhador encontrado para o cargo '%s'.\n", cargoBusca);
    }
    printf("---------------------------------------------------------------------------\n");
}

void relatoriosFiltrados() {
    int opcao;
    do {
        printf("\n--- Relatórios e Filtros ---\n");
        printf("1 - Listar Trabalhadores Ativos\n");
        printf("2 - Listar Trabalhadores Inativos/Desligados\n");
        printf("3 - Listar Trabalhadores por Faixa Salarial\n");
        printf("4 - Listar Trabalhadores por Cargo\n");
        printf("5 - Ordenar e Listar por ID\n");
        printf("6 - Ordenar e Listar por Nome\n");
        printf("0 - Voltar ao Menu ODS 8\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch (opcao) {
            case 1:
                relatorioPorStatus(1);
                break;
            case 2:
                relatorioPorStatus(0);
                break;
            case 3:
                relatorioPorFaixaSalarial();
                break;
            case 4:
                relatorioPorCargo();
                break;
            case 5:
                ordenarTrabalhadoresPorID();
                break;
            case 6:
                ordenarTrabalhadoresPorNome();
                break;
            case 0:
                printf("Voltando ao menu ODS 8...\n");
                break;
            default:
                printf("Opção inválida! Por favor, escolha novamente.\n");
        }
    } while (opcao != 0);
}

void menuODS8() {
    int opcao;
    do {
        printf("\n-Trabalho Decente e Crescimento Econômico\n");
        printf("1 - Cadastrar Trabalhador\n");
        printf("2 - Consultar Trabalhador por ID\n");
        printf("3 - Consultar Trabalhador por Nome\n");
        printf("4 - Atualizar Dados do Trabalhador\n");
        printf("5 - Remover/Desligar Trabalhador\n");
        printf("6 - Listar Todos os Trabalhadores\n");
        printf("7 - Emitir Alertas Críticos\n");
        printf("8 - Relatórios e Filtros\n");
        printf("0 - Voltar ao Menu Principal\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch(opcao) {
            case 1:
                cadastrarTrabalhador();
                break;
            case 2:
                consultarTrabalhadorPorId();
                break;
            case 3:
                consultarTrabalhadorPorNome();
                break;
            case 4:
                atualizarDadosTrabalhador();
                break;
            case 5:
                removerTrabalhador();
                break;
            case 6:
                listarTrabalhadores();
                break;
            case 7:
                emitirAlertasCriticos();
                break;
            case 8:
                relatoriosFiltrados();
                break;
            case 0:
                printf("Voltando ao menu principal...\n");
                break;
            default:
                printf("Opção inválida! Por favor, escolha novamente.\n");
        }
    } while(opcao != 0);
}

int main() {
    if (!expandirArrayTrabalhadores()) { // Ensure initial memory is allocated
        printf("Erro fatal: Não foi possível alocar memória inicial. Encerrando.\n");
        return 1;
    }

    int opcao;
    do {
        printf("\n--- Sistema de Gestão de Desenvolvimento Sustentável ---\n");
        printf("1 - Gerenciar ODS Trabalho Decente e Crescimento Econômico\n");
        printf("0 - Sair do Sistema\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        limparBuffer();

        switch(opcao) {
            case 1:
                menuODS8();
                break;
            case 0:
                printf("Encerrando o Sistema. Até logo!\n");
                break;
            default:
                printf("Opção inválida! Por favor, insira um número válido.\n");
        }
    } while(opcao != 0);

    if (trabalhadores != NULL) {
        free(trabalhadores);
        trabalhadores = NULL;
        printf("\nMemória de trabalhadores liberada.\n");
    }

    return 0;
}
